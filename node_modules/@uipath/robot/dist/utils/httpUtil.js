"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * XMLHttpRequest module used to send Http requests to listeners.
 */
var models_1 = require("../models");
var constants_1 = require("../utils/constants");
var HttpUtil = /** @class */ (function () {
    function HttpUtil() {
    }
    /**
     * HttpGet method.
     * @param url Endpoint to hit.
     * @param transform Method to transform http response string to desired object.
     */
    HttpUtil.get = function (url, transform) {
        return HttpUtil.httpRequest(url, transform, 'GET');
    };
    /**
     * HttpPost method.
     * @param url Endpoint to hit.
     * @param transform Method to transform http response string to desired object.
     * @param data Data to post.
     */
    HttpUtil.post = function (url, transform, data) {
        return HttpUtil.httpRequest(url, transform, 'POST', data);
    };
    HttpUtil.httpRequest = function (url, transform, method, data) {
        var _this = this;
        var request = new XMLHttpRequest();
        return new Promise(function (resolve, reject) {
            request.onreadystatechange = function () {
                if (request.readyState !== 4) {
                    return;
                }
                resolve(new models_1.Response(request.status, request.statusText, transform(this.response), HttpUtil.errorResponse(this.response)));
                HttpUtil.persistTokentoLocalStorage(request);
            };
            request.onerror = function () {
                reject(new models_1.Response(request.status, request.statusText));
                HttpUtil.persistTokentoLocalStorage(request);
            };
            request.open(method, url, true);
            request.withCredentials = true;
            _this.addTokenToHeader(request);
            if (data) {
                request.send(data);
            }
            else {
                request.send();
            }
        });
    };
    /**
     * Converts response data into error model if the call failed safely.
     * @param httpResponse response data
     */
    HttpUtil.errorResponse = function (httpResponse) {
        if (httpResponse) {
            var jsonResponse = JSON.parse(httpResponse).response;
            if (jsonResponse && jsonResponse.Error) {
                return jsonResponse.Error;
            }
        }
        return '';
    };
    /**
     * Checks for existing token in local storage and adds it to outgoing request headers.
     * @param request The request to which the token will be added as header.
     */
    HttpUtil.addTokenToHeader = function (request) {
        var token = window.localStorage.getItem(constants_1.Constants.UIPATH_TOKEN);
        if (token) {
            request.setRequestHeader(constants_1.Constants.UIPATH_TOKEN, token);
        }
    };
    /**
     * Reads all response headers if token is present, sets token to local storage.
     * @param request request containing the response headers.
     */
    HttpUtil.persistTokentoLocalStorage = function (request) {
        var allHeaders = request.getAllResponseHeaders();
        if (allHeaders.indexOf(constants_1.Constants.UIPATH_TOKEN)) {
            var token = request.getResponseHeader(constants_1.Constants.UIPATH_TOKEN);
            if (token) {
                window.localStorage.removeItem(constants_1.Constants.UIPATH_TOKEN);
                window.localStorage.setItem(constants_1.Constants.UIPATH_TOKEN, token);
            }
        }
    };
    return HttpUtil;
}());
exports.HttpUtil = HttpUtil;
