import { Job, JobResult } from './index';
/**
 * Job promise model used for resolution and/or rejection of Promise<JobResult>
 */
export declare class JobPromise implements Promise<JobResult> {
    job: Job;
    [Symbol.toStringTag]: string;
    private promise;
    /**
     * Default constructor
     * @param job Job to be wrapped with promise
     */
    constructor(job: Job);
    then<TResult1 = JobResult, TResult2 = never>(onfulfilled?: ((value: JobResult) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined): Promise<JobResult | TResult>;
    finally(onfinally?: (() => void) | null | undefined): Promise<JobResult>;
    /**
     * Method to attach job status event handlers.
     * @param eventHanlder Attaches callback which is invoked on job status change.
     */
    onStatus: (eventHanlder: (argument?: any) => void) => this;
}
