"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var traceEvent_1 = require("./enums/traceEvent");
var robotSDK_1 = require("./sdk/robotSDK");
var appinsightsLogger_1 = require("./utils/logger/appinsightsLogger");
/**
 * Browser invocation javascript SDK module. Accessible as UiPathRobot from browser console.
 */
var UiPathRobot;
(function (UiPathRobot) {
    var robotSDK = new robotSDK_1.SDK();
    /**
     * Settings object to change default SDK settings
     * @returns {Settings}
     */
    UiPathRobot.settings = robotSDK.settings;
    /**
     * On page load analytics
     */
    document.addEventListener('readystatechange', function () {
        if (document.readyState === 'complete') {
            var logger = new appinsightsLogger_1.AppInsightsLogger();
            if (!UiPathRobot.settings.disableTelemetry) {
                logger.tracePage();
                logger.trace(traceEvent_1.TraceEvent.SDK_Loaded, {}, robotSDK.settings.appOrigin);
            }
        }
    });
    /**
     * Init method set custom consent code handling.
     * @returns {IRobotSDK} instance
     */
    UiPathRobot.init = function () { return robotSDK.init(); };
    /**
     * Method to retrieve all published robot processes on users local machine.
     * @returns Deferred promise of type RobotProcess[] which will be resolved/rejected based on http response.
     */
    UiPathRobot.getProcesses = function () { return robotSDK.getProcesses(); };
    /**
     * Method to attach event handlers on the SDK.
     * @param eventName Available SDK events are 'consent-prompt', 'missing-components'.
     * @param eventHanlder Event handler callback function called when event occurs.
     */
    UiPathRobot.on = function (eventName, eventHanlder) { return robotSDK.on(eventName, eventHanlder); };
    /**
     * Method to invoke a robot process.
     * @param job Job object containing all information about the robot process to run.
     * @returns Deferred promise which is resolved with job result when robot process completes.
     */
    UiPathRobot.startJob = function (job) { return robotSDK.startJob(job); };
    /**
     * Method to stop a robot process.
     * @param process Robotprocess object containing all information about the robot process to cancel.
     * @returns Deferred promise which is resolved when robot process is cancelled.
     */
    UiPathRobot.stopProcess = function (process) { return robotSDK.stopProcess(process); };
})(UiPathRobot = exports.UiPathRobot || (exports.UiPathRobot = {}));
window.UiPathRobot = UiPathRobot;
