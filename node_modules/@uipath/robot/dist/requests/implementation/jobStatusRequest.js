"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jobState_1 = require("../../enums/jobState");
var index_1 = require("../../models/index");
var constants_1 = require("../../utils/constants");
var httpUtil_1 = require("../../utils/httpUtil");
var urlUtil_1 = require("../../utils/urlUtil");
/**
 * Request class to get status of any running/completed job.
 */
var JobStatusRequest = /** @class */ (function () {
    /**
     * Default constructor.
     * @param job Job object whose status we want to request
     */
    function JobStatusRequest(job) {
        var _this = this;
        this.job = job;
        /**
         * Method that sends the request to get status of running/completed job.
         * @returns Promise of Response model type.
         */
        this.send = function () { return httpUtil_1.HttpUtil.get(_this.url, _this.convertToJobStatus); };
        /**
         * Method that returns the request endpoint to which request will be sent.
         * @param robotInvocationPort Port of local listener to which request should be sent.
         * @param consentCode User approved consent code if any.
         * @param job Job for which the result is to be found.
         */
        this.getURL = function (robotInvocationPort, consentCode, job) {
            var url = constants_1.Constants.DEFAULT_ROBOT_INVOKE_DOMAIN + ":" + robotInvocationPort + "/" + constants_1.Constants.GET_JOB_STATUS + "?jobId=" + job.jobId;
            return urlUtil_1.UrlUtil.appendConsentCode(url, consentCode);
        };
        this.url = '';
    }
    /**
     * Set the port to which the request should be sent along with the consent code.
     * @param robotInvocationPort Port on which local listener is running.
     * @param consentCode User consented code.
     */
    JobStatusRequest.prototype.set = function (robotInvocationPort, consentCode) {
        this.url = this.getURL(robotInvocationPort, consentCode, this.job);
        return this;
    };
    /**
     * Mapper method used to convert string response to desired Job status model.
     * @param data HttpResponse sent from listener.
     * @returns Job result of the completed/errored job.
     */
    JobStatusRequest.prototype.convertToJobStatus = function (data) {
        if (data) {
            var jsonResponse = JSON.parse(data).response;
            if (jsonResponse) {
                return new index_1.JobStatus(jobState_1.JobState[jsonResponse.State], jsonResponse.Status, jsonResponse.Output, jsonResponse.Error);
            }
        }
        return new index_1.JobStatus('', [], undefined, undefined);
    };
    return JobStatusRequest;
}());
exports.JobStatusRequest = JobStatusRequest;
