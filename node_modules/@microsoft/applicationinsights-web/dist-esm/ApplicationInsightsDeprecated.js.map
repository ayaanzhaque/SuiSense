{"version":3,"file":"ApplicationInsightsDeprecated.js.map","sources":["ApplicationInsightsDeprecated.js"],"sourcesContent":["import { Util, ProcessLegacy } from \"@microsoft/applicationinsights-common\";\r\n// ToDo: fix properties and measurements once updates are done to common\r\nvar AppInsightsDeprecated = /** @class */ (function () {\r\n    function AppInsightsDeprecated(snippet, appInsightsNew) {\r\n        this._hasLegacyInitializers = false;\r\n        this._queue = [];\r\n        this.config = AppInsightsDeprecated.getDefaultConfig(snippet.config);\r\n        this.appInsightsNew = appInsightsNew;\r\n        this.context = { addTelemetryInitializer: this.addTelemetryInitializers.bind(this) };\r\n    }\r\n    AppInsightsDeprecated.getDefaultConfig = function (config) {\r\n        if (!config) {\r\n            config = {};\r\n        }\r\n        // set default values\r\n        config.endpointUrl = config.endpointUrl || \"https://dc.services.visualstudio.com/v2/track\";\r\n        config.sessionRenewalMs = 30 * 60 * 1000;\r\n        config.sessionExpirationMs = 24 * 60 * 60 * 1000;\r\n        config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? config.maxBatchSizeInBytes : 102400; // 100kb\r\n        config.maxBatchInterval = !isNaN(config.maxBatchInterval) ? config.maxBatchInterval : 15000;\r\n        config.enableDebug = Util.stringToBoolOrDefault(config.enableDebug);\r\n        config.disableExceptionTracking = Util.stringToBoolOrDefault(config.disableExceptionTracking);\r\n        config.disableTelemetry = Util.stringToBoolOrDefault(config.disableTelemetry);\r\n        config.verboseLogging = Util.stringToBoolOrDefault(config.verboseLogging);\r\n        config.emitLineDelimitedJson = Util.stringToBoolOrDefault(config.emitLineDelimitedJson);\r\n        config.diagnosticLogInterval = config.diagnosticLogInterval || 10000;\r\n        config.autoTrackPageVisitTime = Util.stringToBoolOrDefault(config.autoTrackPageVisitTime);\r\n        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {\r\n            config.samplingPercentage = 100;\r\n        }\r\n        config.disableAjaxTracking = Util.stringToBoolOrDefault(config.disableAjaxTracking);\r\n        config.maxAjaxCallsPerView = !isNaN(config.maxAjaxCallsPerView) ? config.maxAjaxCallsPerView : 500;\r\n        config.isBeaconApiDisabled = Util.stringToBoolOrDefault(config.isBeaconApiDisabled, true);\r\n        config.disableCorrelationHeaders = Util.stringToBoolOrDefault(config.disableCorrelationHeaders);\r\n        config.correlationHeaderExcludedDomains = config.correlationHeaderExcludedDomains || [\r\n            \"*.blob.core.windows.net\",\r\n            \"*.blob.core.chinacloudapi.cn\",\r\n            \"*.blob.core.cloudapi.de\",\r\n            \"*.blob.core.usgovcloudapi.net\"\r\n        ];\r\n        config.disableFlushOnBeforeUnload = Util.stringToBoolOrDefault(config.disableFlushOnBeforeUnload);\r\n        config.disableFlushOnUnload = Util.stringToBoolOrDefault(config.disableFlushOnUnload, config.disableFlushOnBeforeUnload);\r\n        config.enableSessionStorageBuffer = Util.stringToBoolOrDefault(config.enableSessionStorageBuffer, true);\r\n        config.isRetryDisabled = Util.stringToBoolOrDefault(config.isRetryDisabled);\r\n        config.isCookieUseDisabled = Util.stringToBoolOrDefault(config.isCookieUseDisabled);\r\n        config.isStorageUseDisabled = Util.stringToBoolOrDefault(config.isStorageUseDisabled);\r\n        config.isBrowserLinkTrackingEnabled = Util.stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);\r\n        config.enableCorsCorrelation = Util.stringToBoolOrDefault(config.enableCorsCorrelation);\r\n        return config;\r\n    };\r\n    /**\r\n     * The array of telemetry initializers to call before sending each telemetry item.\r\n     */\r\n    AppInsightsDeprecated.prototype.addTelemetryInitializers = function (callBack) {\r\n        var _this = this;\r\n        // Add initializer to current processing only if there is any old telemetry initializer\r\n        if (!this._hasLegacyInitializers) {\r\n            this.appInsightsNew.addTelemetryInitializer(function (item) {\r\n                _this._processLegacyInitializers(item); // setup call back for each legacy processor\r\n            });\r\n            this._hasLegacyInitializers = true;\r\n        }\r\n        this._queue.push(callBack);\r\n    };\r\n    AppInsightsDeprecated.prototype.startTrackPage = function (name) {\r\n        this.appInsightsNew.startTrackPage(name);\r\n    };\r\n    AppInsightsDeprecated.prototype.stopTrackPage = function (name, url, properties, measurements) {\r\n        this.appInsightsNew.stopTrackPage(name, url, properties); // update\r\n    };\r\n    AppInsightsDeprecated.prototype.trackPageView = function (name, url, properties, measurements, duration) {\r\n        var telemetry = {\r\n            name: name,\r\n            uri: url,\r\n            properties: properties,\r\n            measurements: measurements\r\n        };\r\n        // fix for props, measurements, duration\r\n        this.appInsightsNew.trackPageView(telemetry);\r\n    };\r\n    AppInsightsDeprecated.prototype.trackEvent = function (name, properties, measurements) {\r\n        this.appInsightsNew.trackEvent({ name: name });\r\n    };\r\n    AppInsightsDeprecated.prototype.trackDependency = function (id, method, absoluteUrl, pathName, totalTime, success, resultCode) {\r\n        this.appInsightsNew.trackDependencyData({\r\n            id: id,\r\n            target: absoluteUrl,\r\n            type: pathName,\r\n            duration: totalTime,\r\n            properties: { HttpMethod: method },\r\n            success: success,\r\n            responseCode: resultCode\r\n        });\r\n    };\r\n    AppInsightsDeprecated.prototype.trackException = function (exception, handledAt, properties, measurements, severityLevel) {\r\n        this.appInsightsNew.trackException({\r\n            exception: exception\r\n        });\r\n    };\r\n    AppInsightsDeprecated.prototype.trackMetric = function (name, average, sampleCount, min, max, properties) {\r\n        this.appInsightsNew.trackMetric({ name: name, average: average, sampleCount: sampleCount, min: min, max: max });\r\n    };\r\n    AppInsightsDeprecated.prototype.trackTrace = function (message, properties, severityLevel) {\r\n        this.appInsightsNew.trackTrace({ message: message, severityLevel: severityLevel });\r\n    };\r\n    AppInsightsDeprecated.prototype.flush = function (async) {\r\n        this.appInsightsNew.flush(async);\r\n    };\r\n    AppInsightsDeprecated.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        this.appInsightsNew.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n    };\r\n    AppInsightsDeprecated.prototype.clearAuthenticatedUserContext = function () {\r\n        this.appInsightsNew.context.user.clearAuthenticatedUserContext();\r\n    };\r\n    AppInsightsDeprecated.prototype._onerror = function (message, url, lineNumber, columnNumber, error) {\r\n        this.appInsightsNew._onerror({ message: message, url: url, lineNumber: lineNumber, columnNumber: columnNumber, error: error });\r\n    };\r\n    AppInsightsDeprecated.prototype.startTrackEvent = function (name) {\r\n        this.appInsightsNew.startTrackEvent(name);\r\n    };\r\n    AppInsightsDeprecated.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        this.appInsightsNew.stopTrackEvent(name, properties, measurements);\r\n    };\r\n    AppInsightsDeprecated.prototype.downloadAndSetup = function (config) {\r\n        throw new Error(\"downloadAndSetup not implemented in web SKU\");\r\n    };\r\n    AppInsightsDeprecated.prototype.updateSnippetDefinitions = function (snippet) {\r\n        // apply full appInsights to the global instance\r\n        // Note: This must be called before loadAppInsights is called\r\n        for (var field in this) {\r\n            if (typeof field === 'string') {\r\n                snippet[field] = this[field];\r\n            }\r\n        }\r\n    };\r\n    // note: these are split into methods to enable unit tests\r\n    AppInsightsDeprecated.prototype.loadAppInsights = function () {\r\n        // initialize global instance of appInsights\r\n        // var appInsights = new Microsoft.ApplicationInsights.AppInsights(this.config);\r\n        var _this = this;\r\n        // implement legacy version of trackPageView for 0.10<\r\n        if (this.config[\"iKey\"]) {\r\n            var originalTrackPageView_1 = this.trackPageView;\r\n            this.trackPageView = function (pagePath, properties, measurements) {\r\n                originalTrackPageView_1.apply(_this, [null, pagePath, properties, measurements]);\r\n            };\r\n        }\r\n        // implement legacy pageView interface if it is present in the snippet\r\n        var legacyPageView = \"logPageView\";\r\n        if (typeof this.snippet[legacyPageView] === \"function\") {\r\n            this[legacyPageView] = function (pagePath, properties, measurements) {\r\n                _this.trackPageView(null, pagePath, properties, measurements);\r\n            };\r\n        }\r\n        // implement legacy event interface if it is present in the snippet\r\n        var legacyEvent = \"logEvent\";\r\n        if (typeof this.snippet[legacyEvent] === \"function\") {\r\n            this[legacyEvent] = function (name, props, measurements) {\r\n                _this.trackEvent(name, props, measurements);\r\n            };\r\n        }\r\n        return this;\r\n    };\r\n    AppInsightsDeprecated.prototype._processLegacyInitializers = function (item) {\r\n        // instead of mapping new to legacy and then back again and repeating in channel, attach callback for channel to call\r\n        item.tags[ProcessLegacy] = this._queue;\r\n        return item;\r\n    };\r\n    return AppInsightsDeprecated;\r\n}());\r\nexport { AppInsightsDeprecated };\r\n//# sourceMappingURL=ApplicationInsightsDeprecated.js.map"],"names":[],"mappings}