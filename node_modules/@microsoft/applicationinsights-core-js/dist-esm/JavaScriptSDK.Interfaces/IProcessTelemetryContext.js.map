{"version":3,"file":"IProcessTelemetryContext.js","sourceRoot":"","sources":["../../src/JavaScriptSDK.Interfaces/IProcessTelemetryContext.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { IAppInsightsCore } from \"./IAppInsightsCore\";\r\nimport { IDiagnosticLogger } from './IDiagnosticLogger';\r\nimport { IConfiguration } from './IConfiguration';\r\nimport { ITelemetryItem } from './ITelemetryItem';\r\nimport { IPlugin } from './ITelemetryPlugin';\r\nimport { ITelemetryPluginChain } from './ITelemetryPluginChain';\r\n\r\n/**\r\n * The current context for the current call to processTelemetry(), used to support sharing the same plugin instance\r\n * between multiple AppInsights instances\r\n */\r\nexport interface IProcessTelemetryContext {\r\n    /**\r\n     * The current core instance for the request\r\n     */\r\n    core: () => IAppInsightsCore;\r\n\r\n    /**\r\n     * THe current diagnostic logger for the request\r\n     */\r\n    diagLog: () => IDiagnosticLogger;\r\n\r\n    /**\r\n     * Gets the current core config instance\r\n     */\r\n    getCfg: ()=> IConfiguration;\r\n\r\n    /**\r\n     * Gets the named extension config\r\n     */\r\n    getExtCfg: <T>(identifier: string, defaultValue?:T|any) => T;\r\n\r\n    /**\r\n     * Gets the named config from either the named identifier extension or core config if neither exist then the\r\n     * default value is returned\r\n     * @param identifier The named extension identifier\r\n     * @param field The config field name\r\n     * @param defaultValue The default value to return if no defined config exists\r\n     */\r\n    getConfig: (identifier: string, field: string, defaultValue?: number | string | boolean) => number | string | boolean;\r\n\r\n    /**\r\n     * Helper to allow plugins to check and possibly shortcut executing code only\r\n     * required if there is a nextPlugin\r\n     */\r\n    hasNext: () => boolean;\r\n\r\n    /**\r\n     * Returns the next configured plugin proxy\r\n     */\r\n    getNext: () => ITelemetryPluginChain;\r\n\r\n    /**\r\n     * Helper to set the next plugin proxy\r\n     */\r\n    setNext: (nextCtx:ITelemetryPluginChain) => void;\r\n\r\n    /**\r\n     * Call back for telemetry processing before it it is sent\r\n     * @param env - This is the current event being reported\r\n     */\r\n    processNext: (env: ITelemetryItem) => void;\r\n\r\n    /**\r\n     * Create a new context using the core and config from the current instance\r\n     * @param plugins - The execution order to process the plugins, if null or not supplied\r\n     *                  then the current execution order will be copied.\r\n     * @param startAt - The plugin to start processing from, if missing from the execution \r\n     *                  order then the next plugin will be NOT set.\r\n     */\r\n    createNew: (plugins?:IPlugin[]|ITelemetryPluginChain, startAt?:IPlugin) => IProcessTelemetryContext;\r\n}\r\n"]}