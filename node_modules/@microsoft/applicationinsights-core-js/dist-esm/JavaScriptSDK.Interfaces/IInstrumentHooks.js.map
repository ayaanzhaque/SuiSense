{"version":3,"file":"IInstrumentHooks.js","sourceRoot":"","sources":["../../src/JavaScriptSDK.Interfaces/IInstrumentHooks.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * A callback function that will be called for the wrapped instrumentation function\r\n * before the original function is executed.\r\n */\r\nexport type InstrumentorHooksCallback = (funcArgs:IInstrumentCallDetails, ...orgArgs: any[]) => void;\r\n\r\n/**\r\n * The callbacks to call for the instrumented function, you must provide at least the request and/or response callbacks, both are not required.\r\n * You must always supply the error callback\r\n */\r\nexport interface IInstrumentHooksCallbacks {\r\n\r\n    /**\r\n     * The hook callback to call before the original function is called\r\n     */\r\n    req?: InstrumentorHooksCallback;\r\n\r\n    /**\r\n     * The hook callback to call after the original function was called\r\n     */\r\n    rsp?: InstrumentorHooksCallback;\r\n\r\n    /**\r\n     * The callback to call if the hook function causes an exception\r\n     */\r\n    hkErr?: InstrumentorHooksCallback;\r\n\r\n    /**\r\n     * The callback to call if the original function causes an exception, even if you\r\n     * supply a callback the original exception will still be thrown\r\n     */\r\n    fnErr?: InstrumentorHooksCallback;\r\n}\r\n\r\n/**\r\n * The holder of the specific instance callback\r\n */\r\nexport interface IInstrumentHook {\r\n    /** Unique Id for this callback on the hooked method */\r\n    id:number;\r\n\r\n    /** Holds the callbacks */\r\n    cbks:IInstrumentHooksCallbacks;\r\n\r\n    /** Remove this hook from the function */\r\n    rm: () => void;\r\n}\r\n\r\nexport interface IInstrumentHooks {\r\n    i:number;               // Used to create unique ids\r\n    n:string;               // Function name\r\n    f:any;                  // Original Function\r\n    h:IInstrumentHook[];    // The hook\r\n}\r\n\r\nexport interface IInstrumentCallDetails {\r\n    name: string;\r\n    inst: any;\r\n\r\n    /**\r\n     * This returns an object that the hook function can use to store hook specific\r\n     * context, it it not shared with any other hook instances and is unique for the \r\n     * current call.\r\n     * A hook implementation can use this to pass / share context between different \r\n     * hook callbacks eg. request/response requst/hookErrors etc.\r\n     */\r\n    ctx: () => any;\r\n\r\n    /**\r\n     * Allows the hook functions to replace the original arguments\r\n     * @param idx - The argument index (0 based)\r\n     * @param value - The new value for the argument\r\n     */\r\n    set: (idx:number, value:any) => void;\r\n\r\n    /**\r\n     * The result of the original method, only populated after the original method has returned\r\n     */\r\n    rslt?: any;\r\n\r\n    /**\r\n     * The error (exception) which occurred while executing the original method\r\n     */\r\n    err?: Error;\r\n}\r\n"]}