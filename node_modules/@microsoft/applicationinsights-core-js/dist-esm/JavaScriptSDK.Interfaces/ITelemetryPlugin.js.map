{"version":3,"file":"ITelemetryPlugin.js","sourceRoot":"","sources":["../../src/JavaScriptSDK.Interfaces/ITelemetryPlugin.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { ITelemetryItem } from \"./ITelemetryItem\";\r\nimport { IConfiguration } from \"./IConfiguration\";\r\nimport { IAppInsightsCore } from \"./IAppInsightsCore\";\r\nimport { IProcessTelemetryContext } from './IProcessTelemetryContext';\r\nimport { ITelemetryPluginChain } from './ITelemetryPluginChain';\r\n\r\n/**\r\n * Configuration provided to SDK core\r\n */\r\nexport interface ITelemetryPlugin extends IPlugin {\r\n    /**\r\n     * Call back for telemetry processing before it it is sent\r\n     * @param env - This is the current event being reported\r\n     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances \r\n     * can optionally use this to access the current core instance or define / pass additional information\r\n     * to later plugins (vs appending items to the telemetry item)\r\n     */\r\n    processTelemetry: (env: ITelemetryItem, itemCtx?: IProcessTelemetryContext) => void;\r\n    \r\n    /**\r\n     * Set next extension for telemetry processing, this is not optional as plugins should use the \r\n     * processNext() function of the passed IProcessTelemetryContext instead. It is being kept for \r\n     * now for backward compatibility only.\r\n     */\r\n    setNextPlugin?: (next: ITelemetryPlugin | ITelemetryPluginChain) => void;\r\n    \r\n    /**\r\n     * Priority of the extension\r\n     */\r\n    priority: number;\r\n}\r\n\r\nexport interface IPlugin {\r\n    /**\r\n     * Initialize plugin loaded by SDK\r\n     * @param config - The config for the plugin to use\r\n     * @param core - The current App Insights core to use for initializing this plugin instance\r\n     * @param extensions - The complete set of extensions to be used for initializing the plugin\r\n     * @param pluginChain - [Optional] specifies the current plugin chain which identifies the \r\n     * set of plugins and the order they should be executed for the current request.\r\n     */\r\n    initialize: (config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?:ITelemetryPluginChain) => void;\r\n    \r\n    /**\r\n     * Returns a value that indicates whether the plugin has already been previously initialized.\r\n     * New plugins should implement this method to avoid being initialized more than once.\r\n     */\r\n    isInitialized?: () => boolean;\r\n\r\n    /**\r\n     * Tear down the plugin and remove any hooked value, the plugin should remove that it is no longer initialized and\r\n     * therefore can be re-initialized after being torn down.\r\n     */\r\n    teardown?: () => void;\r\n\r\n    /**\r\n     * Extension name\r\n     */\r\n    identifier: string;\r\n\r\n    /**\r\n     * Plugin version (available in data.properties.version in common schema)\r\n     */\r\n    version?: string;\r\n}\r\n"]}