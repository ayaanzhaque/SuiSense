{"version":3,"file":"TelemetryHelpers.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/TelemetryHelpers.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,YAAY,CAAC;AAGb,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAMxC,IAAI,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC;AACvC,IAAI,gBAAgB,GAAG,kBAAkB,CAAC;AAC1C,IAAI,QAAQ,GAAG,UAAU,CAAC;AAC1B,IAAI,aAAa,GAAG,eAAe,CAAC;AACpC,IAAI,aAAa,GAAG,eAAe,CAAC;AAEpC;;;;;;GAMG;AACH,MAAM,4BAA4B,cAAsC,EAAE,UAAqB;IAE3F,+DAA+D;IAC/D,IAAI,WAAW,GAAsB,EAAE,CAAC;IACxC,IAAI,UAAU,GAAoB,IAAI,CAAC;IACvC,IAAI,KAAK,GAAyB,cAAc,CAAC,OAAO,EAAE,CAAC;IAC3D,OAAO,KAAK,EAAE,CAAC;QACX,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAClC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,EAAE,CAAC,CAAC,UAAU;gBACN,WAAW,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;gBACtC,WAAW,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/C,mDAAmD;gBACnD,UAAU,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC;YACzC,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxE,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAChC,CAAC;YAED,UAAU,GAAG,SAAS,CAAC;YACvB,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAC5B,CAAC;IACL,CAAC;IAED,+BAA+B;IAC/B,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,UAAA,SAAS;QACvC,SAAS,CAAC,UAAU,CAChB,cAAc,CAAC,MAAM,EAAE,EACvB,cAAc,CAAC,IAAI,EAAE,EACrB,UAAU,EACV,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,sBAAsB,OAAiB;IACzC,mBAAmB;IACnB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,IAAI,EAAE,IAAI;QAC3B,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,MAAM,GAAG,CAAC,CAAC,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC,CAAC,CAAC;IACH,oBAAoB;AACxB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { IPlugin, ITelemetryPlugin } from '../JavaScriptSDK.Interfaces/ITelemetryPlugin';\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { _InternalLogMessage } from \"./DiagnosticLogger\";\r\nimport { _InternalMessageId } from '../JavaScriptSDK.Enums/LoggingEnums';\r\nimport { ProcessTelemetryContext } from './ProcessTelemetryContext';\r\nimport { ITelemetryPluginChain } from '../JavaScriptSDK.Interfaces/ITelemetryPluginChain';\r\n\r\nlet _isFunction = CoreUtils.isFunction;\r\nlet processTelemetry = \"processTelemetry\";\r\nlet priority = \"priority\";\r\nlet setNextPlugin = \"setNextPlugin\";\r\nlet isInitialized = \"isInitialized\";\r\n\r\n/**\r\n * Initialize the queue of plugins\r\n * @param plugins - The array of plugins to initialize and setting of the next plugin\r\n * @param config The current config for the instance\r\n * @param core THe current core instance\r\n * @param extensions The extensions\r\n */\r\nexport function initializePlugins(processContext:ProcessTelemetryContext, extensions: IPlugin[]) {\r\n\r\n    // Set the next plugin and identified the uninitialized plugins\r\n    let initPlugins:ITelemetryPlugin[] = [];\r\n    let lastPlugin:ITelemetryPlugin = null;\r\n    let proxy:ITelemetryPluginChain = processContext.getNext();\r\n    while (proxy) {\r\n        let thePlugin = proxy.getPlugin();\r\n        if (thePlugin) {\r\n            if (lastPlugin &&\r\n                    _isFunction(lastPlugin[setNextPlugin]) &&\r\n                    _isFunction(thePlugin[processTelemetry])) {\r\n                // Set this plugin as the next for the previous one\r\n                lastPlugin[setNextPlugin](thePlugin);\r\n            }\r\n\r\n            if (!_isFunction(thePlugin[isInitialized]) || !thePlugin[isInitialized]()) {\r\n                initPlugins.push(thePlugin);\r\n            }\r\n\r\n            lastPlugin = thePlugin;\r\n            proxy = proxy.getNext();\r\n        }\r\n    }\r\n\r\n    // Now initiatilize the plugins\r\n    CoreUtils.arrForEach(initPlugins, thePlugin => {\r\n        thePlugin.initialize(\r\n            processContext.getCfg(), \r\n            processContext.core(), \r\n            extensions, \r\n            processContext.getNext());\r\n    });\r\n}\r\n\r\nexport function sortPlugins(plugins:IPlugin[]) {\r\n    // Sort by priority\r\n    return plugins.sort((extA, extB) => {\r\n        let result = 0;\r\n        let bHasProcess = _isFunction(extB[processTelemetry]);\r\n        if (_isFunction(extA[processTelemetry])) {\r\n            result = bHasProcess ? extA[priority] - extB[priority] : 1;\r\n        } else if (bHasProcess) {\r\n            result = -1;\r\n        }\r\n\r\n        return result;\r\n    });\r\n    // sort complete    \r\n}"]}