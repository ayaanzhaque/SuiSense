{"version":3,"file":"NotificationManager.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/NotificationManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { INotificationListener } from \"../JavaScriptSDK.Interfaces/INotificationListener\";\r\nimport { INotificationManager } from './../JavaScriptSDK.Interfaces/INotificationManager';\r\nimport { SendRequestReason } from '../JavaScriptSDK.Enums/SendRequestReason';\r\nimport { CoreUtils } from \"./CoreUtils\";\r\n\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nexport class NotificationManager implements INotificationManager {\r\n    listeners: INotificationListener[] = [];\r\n\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {INotificationListener} listener - The notification listener to be added.\r\n     */\r\n    addNotificationListener(listener: INotificationListener): void {\r\n        this.listeners.push(listener);\r\n    }\r\n\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n     */\r\n    removeNotificationListener(listener: INotificationListener): void {\r\n        let index: number = CoreUtils.arrIndexOf(this.listeners, listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = CoreUtils.arrIndexOf(this.listeners, listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n     */\r\n    eventsSent(events: ITelemetryItem[]): void {\r\n        for (let i: number = 0; i < this.listeners.length; ++i) {\r\n            if (this.listeners[i].eventsSent) {\r\n                setTimeout(() => this.listeners[i].eventsSent(events), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notification for events being discarded.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n     * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n     * constant should be used to check the different values.\r\n     */\r\n    eventsDiscarded(events: ITelemetryItem[], reason: number): void {\r\n        for (let i: number = 0; i < this.listeners.length; ++i) {\r\n            if (this.listeners[i].eventsDiscarded) {\r\n                setTimeout(() => this.listeners[i].eventsDiscarded(events, reason), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * [Optional] A function called when the events have been requested to be sent to the sever.\r\n     * @param {number} sendReason - The reason why the event batch is being sent.\r\n     * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.\r\n     */\r\n    eventsSendRequest?(sendReason: number, isAsync: boolean): void {\r\n        for (let i: number = 0; i < this.listeners.length; ++i) {\r\n            if (this.listeners[i].eventsSendRequest) {\r\n                if (isAsync) {\r\n                    setTimeout(() => this.listeners[i].eventsSendRequest(sendReason, isAsync), 0);\r\n                } else {\r\n                    try {\r\n                        this.listeners[i].eventsSendRequest(sendReason, isAsync);\r\n                    } catch (e) {\r\n                        // Catch errors to ensure we don't block sending the requests\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}