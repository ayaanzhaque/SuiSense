{"version":3,"file":"BaseTelemetryPlugin.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/BaseTelemetryPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\"use strict\";\r\n\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { IDiagnosticLogger } from '../JavaScriptSDK.Interfaces/IDiagnosticLogger';\r\nimport { IPlugin, ITelemetryPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { IProcessTelemetryContext } from \"../JavaScriptSDK.Interfaces/IProcessTelemetryContext\";\r\nimport { ITelemetryPluginChain } from \"../JavaScriptSDK.Interfaces/ITelemetryPluginChain\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { ProcessTelemetryContext } from './ProcessTelemetryContext';\r\n\r\nlet _isFunction = CoreUtils.isFunction;\r\nlet getPlugin = \"getPlugin\";\r\n\r\n/**\r\n * BaseTelemetryPlugin provides a basic implementation of the ITelemetryPlugin interface so that plugins\r\n * can avoid implementation the same set of boiler plate code as well as provide a base\r\n * implementation so that new default implementations can be added without breaking all plugins.\r\n */\r\nexport abstract class BaseTelemetryPlugin implements ITelemetryPlugin {\r\n\r\n    /**\r\n     * Call back for telemetry processing before it it is sent\r\n     * @param env - This is the current event being reported\r\n     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances \r\n     * can optionally use this to access the current core instance or define / pass additional information\r\n     * to later plugins (vs appending items to the telemetry item)\r\n     */\r\n    public processNext: (env: ITelemetryItem, itemCtx: IProcessTelemetryContext) => void;\r\n\r\n    /**\r\n     * Set next extension for telemetry processing\r\n     */\r\n    public setNextPlugin: (next: ITelemetryPlugin|ITelemetryPluginChain) => void;\r\n\r\n    /**\r\n     * Returns the current diagnostic logger that can be used to log issues, if no logger is currently\r\n     * assigned a new default one will be created and returned.\r\n     */\r\n    public diagLog: (itemCtx?:IProcessTelemetryContext) => IDiagnosticLogger;\r\n\r\n    /**\r\n     * Returns whether the plugin has been initialized\r\n     */\r\n    public isInitialized: () => boolean;\r\n\r\n    public identifier: string;\r\n    public version?: string;\r\n\r\n    /**\r\n     * Holds the core instance that was used during initialization\r\n     */\r\n    public core: IAppInsightsCore;              \r\n\r\n    priority: number;\r\n\r\n    /**\r\n     * Helper to return the current IProcessTelemetryContext, if the passed argument exists this just\r\n     * returns that value (helps with minification for callers), otherwise it will return the configured\r\n     * context or a temporary one.\r\n     * @param currentCtx - [Optional] The current execution context\r\n     */\r\n    protected _getTelCtx: (currentCtx?:IProcessTelemetryContext) => IProcessTelemetryContext;\r\n\r\n    /**\r\n     * Internal helper to allow setting of the internal initialized setting for inherited instances and unit testing\r\n     */\r\n    protected setInitialized: (isInitialized: boolean) => void;\r\n\r\n    /**\r\n     * Internal helper to initialize the instance\r\n     */\r\n    private _baseTelInit: (config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?:ITelemetryPluginChain) => void;\r\n\r\n    constructor() {\r\n        let _self = this;\r\n        let _isinitialized = false;\r\n        let _rootCtx: IProcessTelemetryContext = null; // Used as the root context, holding the current config and initialized core\r\n        let _nextPlugin:ITelemetryPlugin|ITelemetryPluginChain = null; // Used for backward compatibility where plugins don't call the main pipeline\r\n\r\n        _self.core = null;\r\n\r\n        _self.diagLog = (itemCtx:IProcessTelemetryContext): IDiagnosticLogger => {\r\n            return _self._getTelCtx(itemCtx).diagLog();\r\n        }\r\n\r\n        _self.isInitialized = () => {\r\n            return _isinitialized;\r\n        }\r\n\r\n        _self.setInitialized = (isInitialized: boolean):void => {\r\n            _isinitialized = isInitialized;\r\n        }\r\n\r\n        // _self.getNextPlugin = () => DO NOT IMPLEMENT\r\n        // Sub-classes of this base class *should* not be relying on this value and instead\r\n        // should use processNext() function. If you require access to the plugin use the\r\n        // IProcessTelemetryContext.getNext().getPlugin() while in the pipeline, Note getNext() may return null.\r\n\r\n        _self.setNextPlugin = (next: ITelemetryPlugin|ITelemetryPluginChain) => {\r\n            _nextPlugin = next;\r\n        };\r\n\r\n        _self.processNext = (env: ITelemetryItem, itemCtx: IProcessTelemetryContext) => {\r\n            if (itemCtx) {\r\n                // Normal core execution sequence\r\n                itemCtx.processNext(env);\r\n            } else if (_nextPlugin && _isFunction(_nextPlugin.processTelemetry)) {\r\n                // Looks like backward compatibility or out of band processing. And as it looks \r\n                // like a ITelemetryPlugin or ITelemetryPluginChain, just call processTelemetry\r\n                _nextPlugin.processTelemetry(env, null);\r\n            }\r\n        };\r\n\r\n        _self._getTelCtx = (currentCtx:IProcessTelemetryContext = null) => {\r\n            let itemCtx:IProcessTelemetryContext = currentCtx;\r\n            if (!itemCtx) {\r\n                let rootCtx = _rootCtx || new ProcessTelemetryContext(null, {}, _self.core);\r\n                // tslint:disable-next-line: prefer-conditional-expression\r\n                if (_nextPlugin && _nextPlugin[getPlugin]) {\r\n                    // Looks like a chain object\r\n                    itemCtx = rootCtx.createNew(null, _nextPlugin[getPlugin]);\r\n                } else {\r\n                    itemCtx = rootCtx.createNew(null, _nextPlugin as ITelemetryPlugin);\r\n                }\r\n            }\r\n            \r\n            return itemCtx;\r\n        }\r\n\r\n        _self._baseTelInit = (config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?:ITelemetryPluginChain) => { \r\n            if (config) {\r\n                // Make sure the extensionConfig exists\r\n                config.extensionConfig = config.extensionConfig || [];\r\n            }\r\n    \r\n            if (!pluginChain && core) {\r\n                // Get the first plugin from the core\r\n                pluginChain = core.getProcessTelContext().getNext();\r\n            }\r\n    \r\n            let nextPlugin:IPlugin = _nextPlugin as IPlugin;\r\n            if (_nextPlugin && _nextPlugin[getPlugin]) {\r\n                // If it looks like a proxy/chain then get the plugin\r\n                nextPlugin = _nextPlugin[getPlugin]();\r\n            }\r\n\r\n            // Support legacy plugins where core was defined as a property\r\n            _self.core = core;\r\n            _rootCtx = new ProcessTelemetryContext(pluginChain, config, core, nextPlugin);\r\n            _isinitialized = true;\r\n        }\r\n    }\r\n\r\n    public initialize(config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?:ITelemetryPluginChain): void {\r\n        this._baseTelInit(config, core, extensions, pluginChain);\r\n    }\r\n\r\n    public abstract processTelemetry(env: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;\r\n}\r\n"]}