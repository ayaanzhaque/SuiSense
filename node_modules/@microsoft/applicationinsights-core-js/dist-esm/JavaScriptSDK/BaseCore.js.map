{"version":3,"file":"BaseCore.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/BaseCore.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { IPlugin, ITelemetryPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { IChannelControls } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { INotificationManager } from '../JavaScriptSDK.Interfaces/INotificationManager';\r\nimport { INotificationListener } from \"../JavaScriptSDK.Interfaces/INotificationListener\";\r\nimport { IDiagnosticLogger } from \"../JavaScriptSDK.Interfaces/IDiagnosticLogger\";\r\nimport { ChannelController } from './ChannelController';\r\nimport { IProcessTelemetryContext } from '../JavaScriptSDK.Interfaces/IProcessTelemetryContext';\r\nimport { ProcessTelemetryContext } from './ProcessTelemetryContext';\r\nimport { initializePlugins, sortPlugins } from './TelemetryHelpers';\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { SendRequestReason } from \"../JavaScriptSDK.Enums/SendRequestReason\";\r\n\r\nconst validationError = \"Extensions must provide callback to initialize\";\r\n\r\nconst _arrForEach = CoreUtils.arrForEach;\r\nconst _isNullOrUndefined = CoreUtils.isNullOrUndefined;\r\n\r\nexport class BaseCore implements IAppInsightsCore {\r\n    public static defaultConfig: IConfiguration;\r\n    public config: IConfiguration;\r\n    public logger: IDiagnosticLogger;\r\n\r\n    public _extensions: IPlugin[];\r\n    public isInitialized: () => boolean;\r\n    protected _notificationManager: INotificationManager;\r\n    private _eventQueue: ITelemetryItem[];\r\n    private _channelController: ChannelController;\r\n    private _setInit: (value: boolean) => void;\r\n\r\n    constructor() {\r\n        let _isInitialized = false;\r\n        let _this = this;\r\n        _this._extensions = new Array<IPlugin>();\r\n        _this._channelController = new ChannelController();\r\n        _this.isInitialized = () => _isInitialized;\r\n        _this._setInit = (value: boolean) => { _isInitialized = value; }\r\n        _this._eventQueue = [];\r\n    }\r\n\r\n    initialize(config: IConfiguration, extensions: IPlugin[], logger?: IDiagnosticLogger, notificationManager?: INotificationManager): void {\r\n        let _this = this;\r\n\r\n        // Make sure core is only initialized once\r\n        if (_this.isInitialized()) {\r\n            throw Error(\"Core should not be initialized more than once\");\r\n        }\r\n\r\n        if (!config || _isNullOrUndefined(config.instrumentationKey)) {\r\n            throw Error(\"Please provide instrumentation key\");\r\n        }\r\n\r\n        _this.config = config;\r\n        let channelController = _this._channelController;\r\n\r\n        if (!notificationManager) {\r\n            // Create Dummy notification manager\r\n            notificationManager = CoreUtils.objCreate({\r\n                addNotificationListener: (listener: INotificationListener) => { },\r\n                removeNotificationListener: (listener: INotificationListener) => { },\r\n                eventsSent: (events: ITelemetryItem[]) => { },\r\n                eventsDiscarded: (events: ITelemetryItem[], reason: number) => { },\r\n                eventsSendRequest: (sendReason: number, isAsync: boolean) => { }\r\n            });\r\n        }\r\n\r\n        _this._notificationManager = notificationManager as INotificationManager;\r\n        config.extensions = _isNullOrUndefined(config.extensions) ? [] : config.extensions;\r\n\r\n        // add notification to the extensions in the config so other plugins can access it\r\n        let extConfig = config.extensionConfig = _isNullOrUndefined(config.extensionConfig) ? {} : config.extensionConfig;\r\n        extConfig.NotificationManager = notificationManager;\r\n\r\n        if (!logger) {\r\n            logger = CoreUtils.objCreate({\r\n                throwInternal: (severity: LoggingSeverity, msgId: _InternalMessageId, msg: string, properties?: Object, isUserAct = false) => { },\r\n                warnToConsole: (message: string) => { },\r\n                resetInternalMessageCount: () => { }\r\n            });\r\n        }\r\n        _this.logger = logger;\r\n\r\n        // Concat all available extensions\r\n        let allExtensions = [];\r\n        allExtensions.push(...extensions, ...config.extensions);\r\n        allExtensions = sortPlugins(allExtensions);\r\n\r\n        let coreExtensions:any[] = [];\r\n        let channelExtensions:any[] = [];\r\n\r\n        // Check if any two extensions have the same priority, then warn to console\r\n        // And extract the local extensions from the \r\n        const extPriorities = {};\r\n\r\n        // Extension validation\r\n        _arrForEach(allExtensions, (ext: ITelemetryPlugin) => {\r\n            if (_isNullOrUndefined(ext) || _isNullOrUndefined(ext.initialize)) {\r\n                throw Error(validationError);\r\n            }\r\n\r\n            const extPriority = ext.priority;\r\n            const identifier = ext.identifier;\r\n\r\n            if (ext && extPriority) {\r\n                if (!_isNullOrUndefined(extPriorities[extPriority])) {\r\n                    logger.warnToConsole(\"Two extensions have same priority #\" + extPriority + \" - \" + extPriorities[extPriority] + \", \" + identifier);\r\n                } else {\r\n                    // set a value\r\n                    extPriorities[extPriority] = identifier;\r\n                }\r\n            }\r\n\r\n            // Split extensions to core and channelController\r\n            if (!extPriority || extPriority < channelController.priority) {\r\n                // Add to core extension that will be managed by BaseCore\r\n                coreExtensions.push(ext);\r\n            } else {\r\n                // Add all other extensions to be managed by the channel controller\r\n                channelExtensions.push(ext);\r\n            }\r\n        });\r\n        // Validation complete\r\n\r\n        // Add the channelController to the complete extension collection and\r\n        // to the end of the core extensions\r\n        allExtensions.push(channelController);\r\n        coreExtensions.push(channelController);\r\n\r\n        // Sort the complete set of extensions by priority\r\n        allExtensions = sortPlugins(allExtensions);\r\n        _this._extensions = allExtensions;\r\n\r\n        // initialize channel controller first, this will initialize all channel plugins\r\n        initializePlugins(new ProcessTelemetryContext([channelController], config, _this), allExtensions);\r\n        initializePlugins(new ProcessTelemetryContext(coreExtensions, config, _this), allExtensions);\r\n\r\n        // Now reset the extensions to just those being managed by Basecore\r\n        _this._extensions = coreExtensions;\r\n\r\n        if (_this.getTransmissionControls().length === 0) {\r\n            throw new Error(\"No channels available\");\r\n        }\r\n\r\n        _this._setInit(true);\r\n    }\r\n\r\n    getTransmissionControls(): IChannelControls[][] {\r\n        return this._channelController.getChannelControls();\r\n    }\r\n\r\n    track(telemetryItem: ITelemetryItem) {\r\n        let _this = this;\r\n        if (!telemetryItem.iKey) {\r\n            // setup default iKey if not passed in\r\n            telemetryItem.iKey = _this.config.instrumentationKey;\r\n        }\r\n        if (!telemetryItem.time) {\r\n            // add default timestamp if not passed in\r\n            telemetryItem.time = CoreUtils.toISOString(new Date());\r\n        }\r\n        if (_isNullOrUndefined(telemetryItem.ver)) {\r\n            // CommonSchema 4.0\r\n            telemetryItem.ver = \"4.0\";\r\n        }\r\n\r\n        if (_this.isInitialized()) {\r\n            // Release queue\r\n            if (_this._eventQueue.length > 0) {\r\n                _arrForEach(_this._eventQueue, (event: ITelemetryItem) => {\r\n                    _this.getProcessTelContext().processNext(event);\r\n                });\r\n                _this._eventQueue = [];\r\n            }\r\n            // Process the telemetry plugin chain\r\n            _this.getProcessTelContext().processNext(telemetryItem);\r\n        } else {\r\n            // Queue events until all extensions are initialized\r\n            _this._eventQueue.push(telemetryItem);\r\n        }\r\n    }\r\n\r\n    getProcessTelContext(): IProcessTelemetryContext {\r\n        let _this = this;\r\n        let extensions = _this._extensions;\r\n        let thePlugins: IPlugin[] = extensions;\r\n\r\n        // invoke any common telemetry processors before sending through pipeline\r\n        if (!extensions || extensions.length === 0) {\r\n            // Pass to Channel controller so data is sent to correct channel queues\r\n            thePlugins = [_this._channelController];\r\n        }\r\n\r\n        return new ProcessTelemetryContext(thePlugins, _this.config, _this);\r\n    }\r\n}\r\n"]}