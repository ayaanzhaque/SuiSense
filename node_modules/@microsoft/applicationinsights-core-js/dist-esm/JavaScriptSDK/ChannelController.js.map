{"version":3,"file":"ChannelController.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/ChannelController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { IChannelControls } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { IPlugin, ITelemetryPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { IProcessTelemetryContext } from \"../JavaScriptSDK.Interfaces/IProcessTelemetryContext\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { _InternalLogMessage } from \"./DiagnosticLogger\";\r\nimport { BaseTelemetryPlugin } from './BaseTelemetryPlugin';\r\nimport { ProcessTelemetryContext } from './ProcessTelemetryContext';\r\nimport { initializePlugins } from './TelemetryHelpers';\r\n\r\nconst ChannelControllerPriority = 500;\r\nconst ChannelValidationMessage = \"Channel has invalid priority\";\r\n\r\nlet _arrForEach = CoreUtils.arrForEach;\r\nlet _objDefineAccessors = CoreUtils.objDefineAccessors;\r\n\r\nfunction _checkQueuePriority(queue:IChannelControls[]) {\r\n    _arrForEach(queue, queueItem => {\r\n        if (queueItem.priority < ChannelControllerPriority) {\r\n            throw Error(ChannelValidationMessage + queueItem.identifier);\r\n        }\r\n    });\r\n}\r\n\r\nfunction _addChannelQueue(channelQueues:IChannelControls[][], queue:IChannelControls[]) {\r\n    if (queue && queue.length > 0) {\r\n        queue = queue.sort((a, b) => { // sort based on priority within each queue\r\n            return a.priority - b.priority;\r\n        });\r\n\r\n        _checkQueuePriority(queue);\r\n        channelQueues.push(queue);\r\n    }\r\n}\r\n\r\nfunction _createChannelQueues(channels:IChannelControls[][], extensions: IPlugin[]) {\r\n    let channelQueues:IChannelControls[][] = [];\r\n\r\n    if (channels) {\r\n        // Add and sort the configuration channel queues\r\n        _arrForEach(channels, queue => _addChannelQueue(channelQueues, queue));\r\n    }\r\n\r\n    if (extensions) {\r\n        // Create a new channel queue for any extensions with a priority > the ChannelControllerPriority\r\n        let extensionQueue:IChannelControls[] = [];\r\n        _arrForEach(extensions as IChannelControls[], plugin => {\r\n            if (plugin.priority > ChannelControllerPriority) {\r\n                extensionQueue.push(plugin);\r\n            }\r\n        });\r\n    \r\n        _addChannelQueue(channelQueues, extensionQueue);\r\n    }\r\n\r\n    return channelQueues;\r\n}\r\n\r\nexport class ChannelController extends BaseTelemetryPlugin {\r\n\r\n    identifier: string = \"ChannelControllerPlugin\";\r\n\r\n    setNextPlugin: (next: ITelemetryPlugin) => {}; // channel controller is last in pipeline\r\n\r\n    priority: number = ChannelControllerPriority; // in reserved range 100 to 200\r\n\r\n    private _channelQueue: IChannelControls[][];\r\n\r\n    public processTelemetry(item: ITelemetryItem, itemCtx: IProcessTelemetryContext) {\r\n        if (this._channelQueue) {\r\n            _arrForEach(this._channelQueue, queues => {\r\n                // pass on to first item in queue\r\n                if (queues.length > 0) {\r\n                    // Copying the item context as we could have mutiple chains that are executing asynchronously\r\n                    // and calling _getDefTelCtx as it's possible that the caller doesn't pass any context\r\n                    let chainCtx = this._getTelCtx(itemCtx).createNew(queues); \r\n                    chainCtx.processNext(item);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    public getChannelControls(): IChannelControls[][] {\r\n        return this._channelQueue;\r\n    }\r\n\r\n    public initialize(config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[]) {\r\n        let _self = this;\r\n        if (_self.isInitialized()) {\r\n            // already initialized\r\n            return;\r\n        }\r\n\r\n        super.initialize(config, core, extensions);\r\n\r\n        if ((config as any).isCookieUseDisabled) {\r\n            CoreUtils.disableCookies();\r\n        }\r\n        \r\n        let channelQueue = _self._channelQueue = _createChannelQueues((config||{}).channels, extensions);\r\n\r\n        // Initialize the Queues\r\n        _arrForEach(channelQueue, queue => initializePlugins(new ProcessTelemetryContext(queue, config, core), extensions));\r\n    }\r\n\r\n    /**\r\n     * Static constructor, attempt to create accessors\r\n     */\r\n    // tslint:disable-next-line\r\n    private static _staticInit = (() => {\r\n        // Dynamically create get/set property accessors\r\n        _objDefineAccessors(ChannelController.prototype, \"ChannelControls\", ChannelController.prototype.getChannelControls);\r\n        _objDefineAccessors(ChannelController.prototype, \"channelQueue\", ChannelController.prototype.getChannelControls);\r\n    })();\r\n}"]}