{"version":3,"file":"TelemetryPluginChain.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/TelemetryPluginChain.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,YAAY,CAAC;AAMb,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAC;AAE1F,IAAI,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC;AAEvC;IAgCI,8BAAY,MAAuB,EAAE,UAAmC;QACpE,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,UAAU,GAAyB,IAAI,CAAC;QAC5C,IAAI,oBAAoB,GAAG,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAChE,IAAI,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAEpD,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;QAEtB,KAAK,CAAC,SAAS,GAAG;YACd,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC,CAAC;QAEF,KAAK,CAAC,OAAO,GAAG;YACZ,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC,CAAC;QAEF,KAAK,CAAC,OAAO,GAAG,UAAC,UAAgC;YAC7C,UAAU,GAAG,UAAU,CAAC;QAC5B,CAAC,CAAA;QAED,KAAK,CAAC,gBAAgB,GAAG,UAAC,GAAmB,EAAE,OAAgC;YAC3E,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACX,oFAAoF;gBACpF,OAAO,GAAG,UAAU,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,MAAM,IAAI,oBAAoB,CAAC,CAAC,CAAC;gBACjC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC;oBAED,qFAAqF;oBACrF,iFAAiF;oBACjF,+BAA+B;oBAC/B,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;oBAC5B,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBACd,iEAAiE;wBACjE,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBACrC,CAAC;oBAED,8EAA8E;oBAC9E,UAAU,IAAI,CAAE,UAAmC,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;oBAErE,MAAM,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBAC1C,CAAC;gBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACb,IAAI,MAAM,GAAG,UAAU,IAAK,UAAmC,CAAC,OAAO,CAAC;oBACxE,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACzB,2FAA2F;wBAC3F,oFAAoF;wBACpF,OAAO,CAAC,OAAO,EAAE,CAAC,aAAa,CAC3B,eAAe,CAAC,QAAQ,EACxB,kBAAkB,CAAC,eAAe,EAClC,UAAU,GAAG,MAAM,CAAC,UAAU,GAAG,qCAAqC,GAAG,KAAK,CAAC,CAAC;oBACxF,CAAC;oBAED,EAAE,CAAC,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACxB,iGAAiG;wBACjG,8EAA8E;wBAC9E,UAAU,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;oBAC9C,CAAC;gBACL,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;gBAErB,iGAAiG;gBACjG,mDAAmD;gBACnD,UAAU,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC9C,CAAC;QACL,CAAC,CAAC;IACN,CAAC;IACL,2BAAC;AAAD,CAAC,AArGD,IAqGC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { ITelemetryItem } from '../JavaScriptSDK.Interfaces/ITelemetryItem';\r\nimport { IProcessTelemetryContext } from \"../JavaScriptSDK.Interfaces/IProcessTelemetryContext\";\r\nimport { ITelemetryPluginChain } from \"../JavaScriptSDK.Interfaces/ITelemetryPluginChain\";\r\nimport { IPlugin, ITelemetryPlugin } from '../JavaScriptSDK.Interfaces/ITelemetryPlugin';\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { _InternalLogMessage } from \"./DiagnosticLogger\";\r\nimport { LoggingSeverity, _InternalMessageId } from '../JavaScriptSDK.Enums/LoggingEnums';\r\n\r\nlet _isFunction = CoreUtils.isFunction;\r\n\r\nexport class TelemetryPluginChain implements ITelemetryPluginChain {\r\n\r\n    /**\r\n     * Returns the underlying plugin that is being proxied for the processTelemetry call\r\n     */\r\n    getPlugin: () => ITelemetryPlugin;\r\n\r\n    /**\r\n     * Returns the next plugin\r\n     */\r\n    getNext: () => ITelemetryPluginChain;\r\n\r\n    /**\r\n     * Sets the next proxy to be executed as the next plugin\r\n     * (Should only be used during initialization, which is why it's not defined on the interface)\r\n     */\r\n    setNext: (nextPlugin:ITelemetryPluginChain) => void;\r\n\r\n    /**\r\n     * Call back for telemetry processing before it it is sent\r\n     * @param env - This is the current event being reported\r\n     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances \r\n     * can optionally use this to access the current core instance or define / pass additional information\r\n     * to later plugins (vs appending items to the telemetry item)\r\n     */\r\n    processTelemetry: (env: ITelemetryItem, itemCtx: IProcessTelemetryContext) => void;\r\n\r\n    /**\r\n     * Internal flag used to try and identify root cause failures\r\n     */\r\n    private _hasRun: boolean;\r\n\r\n    constructor(plugin:ITelemetryPlugin, defItemCtx:IProcessTelemetryContext) {\r\n        let _self = this;\r\n        let _nextProxy:ITelemetryPluginChain = null;\r\n        let _hasProcessTelemetry = _isFunction(plugin.processTelemetry);\r\n        let _hasSetNext = _isFunction(plugin.setNextPlugin);\r\n\r\n        _self._hasRun = false;\r\n\r\n        _self.getPlugin = () => {\r\n            return plugin;\r\n        };\r\n\r\n        _self.getNext = () => {\r\n            return _nextProxy;\r\n        };\r\n\r\n        _self.setNext = (nextPlugin:ITelemetryPluginChain) => {\r\n            _nextProxy = nextPlugin;\r\n        }\r\n\r\n        _self.processTelemetry = (env: ITelemetryItem, itemCtx:IProcessTelemetryContext) => {\r\n            if (!itemCtx) {\r\n                // Looks like a plugin didn't pass the (optional) context, so restore to the default\r\n                itemCtx = defItemCtx;\r\n            }\r\n\r\n            if (plugin && _hasProcessTelemetry) {\r\n                _self._hasRun = true;\r\n                try {\r\n\r\n                    // Ensure that we keep the context in sync (for processNext()), just in case a plugin\r\n                    // doesn't calls processTelemetry() instead of itemContext.processNext() or some \r\n                    // other form of error occurred\r\n                    itemCtx.setNext(_nextProxy);\r\n                    if (_hasSetNext) {\r\n                        // Backward compatibility setting the next plugin on the instance\r\n                        plugin.setNextPlugin(_nextProxy);\r\n                    }\r\n\r\n                    // Set a flag on the next plugin so we know if it was attempted to be executed\r\n                    _nextProxy && ((_nextProxy as TelemetryPluginChain)._hasRun = false);\r\n\r\n                    plugin.processTelemetry(env, itemCtx);\r\n                } catch (error) {\r\n                    let hasRun = _nextProxy && (_nextProxy as TelemetryPluginChain)._hasRun;\r\n                    if (!_nextProxy || !hasRun) {\r\n                        // Either we have no next plugin or the current one did not attempt to call the next plugin\r\n                        // Which means the current one is the root of the failure so log/report this failure\r\n                        itemCtx.diagLog().throwInternal(\r\n                            LoggingSeverity.CRITICAL,\r\n                            _InternalMessageId.PluginException,\r\n                            \"Plugin [\" + plugin.identifier + \"] failed during processTelemetry - \" + error);\r\n                    }\r\n\r\n                    if (_nextProxy && !hasRun) {\r\n                        // As part of the failure the current plugin did not attempt to call the next plugin in the cahin\r\n                        // So rather than leave the pipeline dead in the water we call the next plugin\r\n                        _nextProxy.processTelemetry(env, itemCtx);\r\n                    }\r\n                }\r\n            } else if (_nextProxy) {\r\n                _self._hasRun = true;\r\n\r\n                // The underlying plugin is either not defined or does not have a processTelemetry implementation\r\n                // so we still want the next plugin to be executed.\r\n                _nextProxy.processTelemetry(env, itemCtx);\r\n            }\r\n        };\r\n    }\r\n}\r\n"]}