{"version":3,"file":"ProcessTelemetryContext.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/ProcessTelemetryContext.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,YAAY,CAAC;AASb,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAE9D,IAAI,kBAAkB,GAAG,SAAS,CAAC,iBAAiB,CAAC;AAErD;;GAEG;AACH,2BAA2B,OAAiB,EAAE,OAAgC;IAC1E,IAAI,OAAO,GAA2B,EAAE,CAAC;IAEzC,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAChC,uDAAuD;QACvD,IAAI,SAAS,GAAwB,IAAI,CAAC;QAC1C,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;YAC5C,IAAI,SAAS,GAAG,OAAO,CAAC,GAAG,CAAqB,CAAC;YACjD,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBAChE,uCAAuC;gBACvC,IAAI,QAAQ,GAAG,IAAI,oBAAoB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC5D,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACvB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACZ,sDAAsD;oBACtD,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAChC,CAAC;gBAED,SAAS,GAAG,QAAQ,CAAC;YACzB,CAAC;QACL,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAClD,CAAC;AAED,yBAAyB,KAA2B,EAAE,OAAgC,EAAE,OAAe;IACnG,IAAI,OAAO,GAAa,EAAE,CAAC;IAC3B,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IAEjC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACR,OAAO,KAAK,EAAE,CAAC;YACX,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;YAClC,EAAE,CAAC,CAAC,GAAG,IAAI,SAAS,KAAK,OAAO,CAAC,CAAC,CAAC;gBAC/B,GAAG,GAAG,IAAI,CAAC;gBACX,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC5B,CAAC;YACD,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAC5B,CAAC;IACL,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC/C,CAAC;AAED,0BAA0B,UAAoB,EAAE,OAAgC,EAAE,OAAe;IAC7F,IAAI,OAAO,GAAa,UAAU,CAAC;IACnC,IAAI,GAAG,GAAG,KAAK,CAAC;IAChB,EAAE,CAAC,CAAC,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC;QACxB,OAAO,GAAG,EAAE,CAAC;QAEb,SAAS,CAAC,UAAU,CAAC,UAAU,EAAE,UAAA,SAAS;YACtC,EAAE,CAAC,CAAC,GAAG,IAAI,SAAS,KAAK,OAAO,CAAC,CAAC,CAAC;gBAC/B,GAAG,GAAG,IAAI,CAAC;gBACX,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC5B,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAClB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACX,OAAO,GAAG,EAAE,CAAC;QACjB,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC/C,CAAC;AAED;IAkDI;;;;;OAKG;IACH,iCAAY,OAAuC,EAAE,MAAsB,EAAE,IAAqB,EAAE,OAAgB;QAChH,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,UAAU,GAA0B,IAAI,CAAC,CAAC,yBAAyB;QAEvE,6DAA6D;QAC7D,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,CAAC,OAAO,IAAI,SAAS,CAAC,UAAU,CAAE,OAAiC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAChF,+BAA+B;gBAC/B,UAAU,GAAG,eAAe,CAAC,OAAgC,EAAE,KAAK,EAAE,OAAO,IAAG,OAAiC,CAAC,SAAS,EAAE,CAAC,CAAC;YACnI,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,wBAAwB;gBACxB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACV,UAAU,GAAG,gBAAgB,CAAC,OAAoB,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBACxE,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACxC,0CAA0C;oBAC1C,UAAU,GAAG,iBAAiB,CAAC,OAAoB,EAAE,KAAK,CAAC,CAAA;gBAC/D,CAAC;YACL,CAAC;QACL,CAAC;QAED,KAAK,CAAC,IAAI,GAAG;YACT,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC;QAEF,KAAK,CAAC,OAAO,GAAG;YACZ,IAAI,MAAM,GAAsB,CAAC,IAAI,IAAE,EAAsB,CAAC,CAAC,MAAM,CAAC;YACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACV,sCAAsC;gBACtC,MAAM,GAAG,IAAI,gBAAgB,CAAC,MAAM,IAAE,EAAE,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC,CAAC;QAEF,KAAK,CAAC,MAAM,GAAG;YACX,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC,CAAC;QAEF,KAAK,CAAC,SAAS,GAAG,UAAI,UAAiB,EAAE,YAAuB;YAAvB,6BAAA,EAAA,iBAAuB;YAC5D,IAAI,SAAW,CAAC;YAChB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,IAAI,SAAS,GAAG,MAAM,CAAC,eAAe,CAAC;gBACvC,EAAE,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC,CAAC;oBAC1B,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;gBACtC,CAAC;YACL,CAAC;YAED,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAM,CAAC;QACvD,CAAC,CAAC;QAEF,KAAK,CAAC,SAAS,GAAG,UAAC,UAAiB,EAAE,KAAa,EAAE,YAA+C;YAA/C,6BAAA,EAAA,oBAA+C;YAChG,IAAI,QAAQ,CAAC;YACb,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAClD,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrD,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtD,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;YAED,MAAM,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC;QACnE,CAAC,CAAC;QAEF,KAAK,CAAC,OAAO,GAAG;YACZ,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC;QAC9B,CAAC,CAAC;QAEF,KAAK,CAAC,OAAO,GAAG;YACZ,MAAM,CAAC,UAAU,CAAC;QACtB,CAAC,CAAA;QAED,KAAK,CAAC,OAAO,GAAG,UAAC,UAAgC;YAC7C,UAAU,GAAG,UAAU,CAAC;QAC5B,CAAC,CAAC;QAEF,KAAK,CAAC,WAAW,GAAG,UAAC,GAAmB;YACpC,IAAI,UAAU,GAAG,UAAU,CAAC;YAE5B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACb,wCAAwC;gBACxC,UAAU,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC;gBAClC,UAAU,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC,CAAC;QAEF,KAAK,CAAC,SAAS,GAAG,UAAC,OAA8C,EAAE,OAAgB;YAAhE,wBAAA,EAAA,cAA8C;YAC7D,MAAM,CAAC,IAAI,uBAAuB,CAAC,OAAO,IAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACnF,CAAC,CAAA;IACL,CAAC;IACL,8BAAC;AAAD,CAAC,AAhJD,IAgJC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\";\r\nimport { IDiagnosticLogger } from '../JavaScriptSDK.Interfaces/IDiagnosticLogger';\r\nimport { IConfiguration } from '../JavaScriptSDK.Interfaces/IConfiguration';\r\nimport { ITelemetryItem } from '../JavaScriptSDK.Interfaces/ITelemetryItem';\r\nimport { IPlugin, ITelemetryPlugin } from '../JavaScriptSDK.Interfaces/ITelemetryPlugin';\r\nimport { IProcessTelemetryContext } from \"../JavaScriptSDK.Interfaces/IProcessTelemetryContext\";\r\nimport { ITelemetryPluginChain } from '../JavaScriptSDK.Interfaces/ITelemetryPluginChain';\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport { TelemetryPluginChain } from \"./TelemetryPluginChain\";\r\n\r\nlet _isNullOrUndefined = CoreUtils.isNullOrUndefined;\r\n\r\n/**\r\n * Creates the instance execution chain for the plugins\r\n */\r\nfunction _createProxyChain(plugins:IPlugin[], itemCtx:IProcessTelemetryContext) {\r\n    let proxies:ITelemetryPluginChain[] = [];\r\n    \r\n    if (plugins && plugins.length > 0) {\r\n        // Create the proxies and wire up the next plugin chain\r\n        let lastProxy:TelemetryPluginChain = null;\r\n        for (let idx = 0; idx < plugins.length; idx++) {\r\n            let thePlugin = plugins[idx] as ITelemetryPlugin;\r\n            if (thePlugin && CoreUtils.isFunction(thePlugin.processTelemetry)) {\r\n                // Only add plugins that are processors\r\n                let newProxy = new TelemetryPluginChain(thePlugin, itemCtx);\r\n                proxies.push(newProxy);\r\n                if (lastProxy) {\r\n                    // Set this new proxy as the next for the previous one\r\n                    lastProxy.setNext(newProxy);\r\n                }\r\n                \r\n                lastProxy = newProxy;\r\n            }\r\n        }\r\n    }\r\n\r\n    return proxies.length > 0 ? proxies[0] : null;\r\n}\r\n\r\nfunction _copyProxyChain(proxy:ITelemetryPluginChain, itemCtx:IProcessTelemetryContext, startAt:IPlugin) {\r\n    let plugins:IPlugin[] = [];\r\n    let add = startAt ? false : true;\r\n\r\n    if (proxy) {\r\n        while (proxy) {\r\n            let thePlugin = proxy.getPlugin();\r\n            if (add || thePlugin === startAt) {\r\n                add = true;\r\n                plugins.push(thePlugin);\r\n            }\r\n            proxy = proxy.getNext();\r\n        }\r\n    }\r\n\r\n    if (!add) {\r\n        plugins.push(startAt);\r\n    }\r\n    \r\n    return _createProxyChain(plugins, itemCtx);\r\n}\r\n\r\nfunction _copyPluginChain(srcPlugins:IPlugin[], itemCtx:IProcessTelemetryContext, startAt:IPlugin) {\r\n    let plugins:IPlugin[] = srcPlugins;\r\n    let add = false;\r\n    if (startAt && srcPlugins) {\r\n        plugins = [];\r\n    \r\n        CoreUtils.arrForEach(srcPlugins, thePlugin => {\r\n            if (add || thePlugin === startAt) {\r\n                add = true;\r\n                plugins.push(thePlugin);\r\n            }\r\n        });\r\n    }\r\n\r\n    if (startAt && !add) {\r\n        if (!plugins) {\r\n            plugins = [];\r\n        }\r\n        plugins.push(startAt);\r\n    }\r\n    \r\n    return _createProxyChain(plugins, itemCtx);\r\n}\r\n\r\nexport class ProcessTelemetryContext implements IProcessTelemetryContext {\r\n    /**\r\n     * Gets the current core config instance\r\n     */\r\n    public getCfg: () => IConfiguration;\r\n\r\n    public getExtCfg: <T>(identifier:string, defaultValue?:T|any) => T;\r\n                        \r\n    public getConfig: (identifier:string, field: string, defaultValue?: number | string | boolean) => number | string | boolean;\r\n\r\n    /**\r\n     * Returns the IAppInsightsCore instance for the current request\r\n     */\r\n    public core: () => IAppInsightsCore;\r\n\r\n    /**\r\n     * Returns the current IDiagnosticsLogger for the current request\r\n     */\r\n    public diagLog: () => IDiagnosticLogger;\r\n\r\n    /**\r\n     * Helper to allow inherited classes to check and possibly shortcut executing code only\r\n     * required if there is a nextPlugin\r\n     */\r\n    public hasNext: () => boolean;\r\n\r\n    /**\r\n     * Returns the next configured plugin proxy\r\n     */\r\n    public getNext: () => ITelemetryPluginChain;\r\n\r\n    /**\r\n     * Helper to set the next plugin proxy\r\n     */\r\n    public setNext: (nextCtx:ITelemetryPluginChain) => void;\r\n\r\n    /**\r\n     * Call back for telemetry processing before it it is sent\r\n     * @param env - This is the current event being reported\r\n     * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances \r\n     * can optionally use this to access the current core instance or define / pass additional information\r\n     * to later plugins (vs appending items to the telemetry item)\r\n     */\r\n    public processNext: (env: ITelemetryItem) => void;\r\n\r\n    /**\r\n     * Create a new context using the core and config from the current instance\r\n     */\r\n    public createNew: (plugins?:IPlugin[]|ITelemetryPluginChain, startAt?:IPlugin) => IProcessTelemetryContext;\r\n\r\n    /**\r\n     * Creates a new Telemetry Item context with the current config, core and plugin execution chain\r\n     * @param plugins - The plugin instances that will be executed\r\n     * @param config - The current config\r\n     * @param core - The current core instance\r\n     */\r\n    constructor(plugins:IPlugin[]|ITelemetryPluginChain, config: IConfiguration, core:IAppInsightsCore, startAt?:IPlugin) {\r\n        let _self = this;\r\n        let _nextProxy: ITelemetryPluginChain = null; // Null == No next plugin\r\n\r\n        // There is no next element (null) vs not defined (undefined)\r\n        if (startAt !== null) {\r\n            if (plugins && CoreUtils.isFunction((plugins as ITelemetryPluginChain).getPlugin)) {\r\n                // We have a proxy chain object\r\n                _nextProxy = _copyProxyChain(plugins as ITelemetryPluginChain, _self, startAt||(plugins as ITelemetryPluginChain).getPlugin());\r\n            } else {\r\n                // We just have an array\r\n                if (startAt) {\r\n                    _nextProxy = _copyPluginChain(plugins as IPlugin[], _self, startAt);\r\n                } else if (CoreUtils.isUndefined(startAt)) {\r\n                    // Undefined means copy the existing chain\r\n                    _nextProxy = _createProxyChain(plugins as IPlugin[], _self)\r\n                }\r\n            }\r\n        }\r\n\r\n        _self.core = () => {\r\n            return core;\r\n        };\r\n        \r\n        _self.diagLog = () => {\r\n            let logger: IDiagnosticLogger = (core||{} as IAppInsightsCore).logger;\r\n            if (!logger) {\r\n                // Fallback so we always have a logger\r\n                logger = new DiagnosticLogger(config||{});\r\n            }\r\n\r\n            return logger;\r\n        };\r\n\r\n        _self.getCfg = () => {\r\n            return config;\r\n        };\r\n\r\n        _self.getExtCfg = <T>(identifier:string, defaultValue:T|any = {}) => {\r\n            let theConfig:T;\r\n            if (config) {\r\n                let extConfig = config.extensionConfig;\r\n                if (extConfig && identifier) {\r\n                    theConfig = extConfig[identifier];\r\n                }\r\n            }\r\n    \r\n            return (theConfig ? theConfig : defaultValue) as T;\r\n        };\r\n\r\n        _self.getConfig = (identifier:string, field: string, defaultValue: number | string | boolean = false) => {\r\n            let theValue;\r\n            let extConfig = _self.getExtCfg(identifier, null);\r\n            if (extConfig && !_isNullOrUndefined(extConfig[field])) {\r\n                theValue = extConfig[field];\r\n            } else if (config && !_isNullOrUndefined(config[field])) {\r\n                theValue = config[field];\r\n            }\r\n    \r\n            return !_isNullOrUndefined(theValue) ? theValue : defaultValue;\r\n        };\r\n\r\n        _self.hasNext = () => {\r\n            return _nextProxy != null;\r\n        };\r\n\r\n        _self.getNext = () => {\r\n            return _nextProxy;\r\n        }\r\n\r\n        _self.setNext = (nextPlugin:ITelemetryPluginChain) => {\r\n            _nextProxy = nextPlugin;\r\n        };\r\n\r\n        _self.processNext = (env: ITelemetryItem) => {\r\n            let nextPlugin = _nextProxy;\r\n\r\n            if (nextPlugin) {\r\n                // Automatically move to the next plugin\r\n                _nextProxy = nextPlugin.getNext();\r\n                nextPlugin.processTelemetry(env, _self);\r\n            }\r\n        };\r\n\r\n        _self.createNew = (plugins:IPlugin[]|ITelemetryPluginChain = null, startAt?:IPlugin) => {\r\n            return new ProcessTelemetryContext(plugins||_nextProxy, config, core, startAt);\r\n        }\r\n    }\r\n}\r\n"]}