{"version":3,"file":"ConnectionStringParser.js","sourceRoot":"","sources":["../src/ConnectionStringParser.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAKlC,OAAO,EAAE,uBAAuB,EAAE,MAAM,aAAa,CAAC;AACtD,OAAO,EAAE,SAAS,EAAE,MAAM,wCAAwC,CAAC;AAEnE;IAAA;IAqCA,CAAC;IAjCiB,4BAAK,GAAnB,UAAoB,gBAAyB;QACzC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAED,IAAM,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;QAEjF,IAAM,MAAM,GAAqB,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,UAAC,MAAwB,EAAE,EAAU;YAC/F,IAAM,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,CAAC;YAE5E,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,EAAyB,CAAC;gBAC5D,IAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAe,CAAC;YAClC,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACvC,0DAA0D;YAE1D,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;gBACxB,uDAAuD;gBACvD,IAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;gBACpE,MAAM,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,IAAI,CAAC,UAAU,GAAG,cAAc,GAAG,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;YACzH,CAAC;YAED,8BAA8B;YAC9B,MAAM,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,IAAI,uBAAuB,CAAC;QACnF,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAnCc,wCAAiB,GAAG,GAAG,CAAC;IACxB,iDAA0B,GAAG,GAAG,CAAC;IAmCpD,6BAAC;CAAA,AArCD,IAqCC;SArCY,sBAAsB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// @duplicate of https://github.com/microsoft/ApplicationInsights-node.js/blob/develop/Library/ConnectionStringParser.ts\r\n\r\nimport { ConnectionString, ConnectionStringKey } from \"./Interfaces/ConnectionString\";\r\nimport { DEFAULT_BREEZE_ENDPOINT } from \"./Constants\";\r\nimport { CoreUtils } from \"@microsoft/applicationinsights-core-js\";\r\n\r\nexport class ConnectionStringParser {\r\n    private static _FIELDS_SEPARATOR = \";\";\r\n    private static _FIELD_KEY_VALUE_SEPARATOR = \"=\";\r\n\r\n    public static parse(connectionString?: string): ConnectionString {\r\n        if (!connectionString) {\r\n            return {};\r\n        }\r\n\r\n        const kvPairs = connectionString.split(ConnectionStringParser._FIELDS_SEPARATOR);\r\n\r\n        const result: ConnectionString = CoreUtils.arrReduce(kvPairs, (fields: ConnectionString, kv: string) => {\r\n            const kvParts = kv.split(ConnectionStringParser._FIELD_KEY_VALUE_SEPARATOR);\r\n\r\n            if (kvParts.length === 2) { // only save fields with valid formats\r\n                const key = kvParts[0].toLowerCase() as ConnectionStringKey;\r\n                const value = kvParts[1];\r\n                fields[key] = value as string;\r\n            }\r\n            return fields;\r\n        }, {});\r\n\r\n        if (CoreUtils.objKeys(result).length > 0) {\r\n            // this is a valid connection string, so parse the results\r\n\r\n            if (result.endpointsuffix) {\r\n                // use endpoint suffix where overrides are not provided\r\n                const locationPrefix = result.location ? result.location + \".\" : \"\";\r\n                result.ingestionendpoint = result.ingestionendpoint || (\"https://\" + locationPrefix + \"dc.\" + result.endpointsuffix);\r\n            }\r\n\r\n            // apply the default endpoints\r\n            result.ingestionendpoint = result.ingestionendpoint || DEFAULT_BREEZE_ENDPOINT;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}