{"version":3,"file":"IAppInsights.js","sourceRoot":"","sources":["../../src/Interfaces/IAppInsights.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { IEventTelemetry } from './IEventTelemetry';\r\nimport { IPageViewTelemetry } from './IPageViewTelemetry';\r\nimport { IExceptionTelemetry, IAutoExceptionTelemetry } from './IExceptionTelemetry';\r\nimport { ITraceTelemetry } from './ITraceTelemetry';\r\nimport { IMetricTelemetry } from  './IMetricTelemetry';\r\nimport { IPageViewPerformanceTelemetry } from './IPageViewPerformanceTelemetry';\r\nimport { ITelemetryItem } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport interface IAppInsights {\r\n    trackEvent(event: IEventTelemetry, customProperties?: {[key: string]: any}): void;\r\n    trackPageView(pageView: IPageViewTelemetry, customProperties?: { [key: string]: any }): void;\r\n    trackException(exception: IExceptionTelemetry, customProperties?: {[key: string]: any}): void;\r\n    _onerror(exception: IAutoExceptionTelemetry): void;\r\n    trackTrace(trace: ITraceTelemetry, customProperties?: {[key: string]: any}): void;\r\n    trackMetric(metric: IMetricTelemetry, customProperties?: {[key: string]: any}): void;\r\n    startTrackPage(name?: string): void;\r\n    stopTrackPage(name?: string, url?: string, customProperties?: Object): void;\r\n    startTrackEvent(name: string): void;\r\n    stopTrackEvent(name: string, properties?: Object, measurements?: Object): void;\r\n    addTelemetryInitializer(telemetryInitializer: (item: ITelemetryItem) => boolean | void): void;\r\n    trackPageViewPerformance(pageViewPerformance: IPageViewPerformanceTelemetry, customProperties?: { [key: string]: any }): void;\r\n}\r\n"]}