{"version":3,"file":"Serializer.js","sourceRoot":"","sources":["../src/Serializer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Util, ISerializable, FieldType } from '@microsoft/applicationinsights-common';\r\nimport { IDiagnosticLogger, LoggingSeverity, _InternalMessageId, CoreUtils, getJSON } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class Serializer {\r\n\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    constructor(logger: IDiagnosticLogger) {\r\n        this._logger = logger;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current object to a JSON string.\r\n     */\r\n    public serialize(input: ISerializable): string {\r\n        const output = this._serializeObject(input, \"root\");\r\n        try {\r\n            return getJSON().stringify(output);\r\n        } catch (e) {\r\n            // if serialization fails return an empty string\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, (e && CoreUtils.isFunction(e.toString)) ? e.toString() : \"Error serializing object\", null, true);\r\n        }\r\n    }\r\n\r\n    private _serializeObject(source: ISerializable, name: string): any {\r\n        const circularReferenceCheck = \"__aiCircularRefCheck\";\r\n        let output = {};\r\n\r\n        if (!source) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, \"cannot serialize object because it is null or undefined\", { name }, true);\r\n            return output;\r\n        }\r\n\r\n        if (source[circularReferenceCheck]) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CircularReferenceDetected, \"Circular reference detected while serializing object\", { name }, true);\r\n            return output;\r\n        }\r\n\r\n        if (!source.aiDataContract) {\r\n            // special case for measurements/properties/tags\r\n            if (name === \"measurements\") {\r\n                output = this._serializeStringMap(source, \"number\", name);\r\n            } else if (name === \"properties\") {\r\n                output = this._serializeStringMap(source, \"string\", name);\r\n            } else if (name === \"tags\") {\r\n                output = this._serializeStringMap(source, \"string\", name);\r\n            } else if (Util.isArray(source)) {\r\n                output = this._serializeArray(source as any, name);\r\n            } else {\r\n                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, \"Attempting to serialize an object which does not implement ISerializable\", { name }, true);\r\n\r\n                try {\r\n                    // verify that the object can be stringified\r\n                    getJSON().stringify(source);\r\n                    output = source;\r\n                } catch (e) {\r\n                    // if serialization fails return an empty string\r\n                    this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, (e && CoreUtils.isFunction(e.toString)) ? e.toString() : \"Error serializing object\", null, true);\r\n                }\r\n            }\r\n\r\n            return output;\r\n        }\r\n\r\n        source[circularReferenceCheck] = true;\r\n        for (const field in source.aiDataContract) {\r\n\r\n            const contract = source.aiDataContract[field];\r\n            const isRequired = (CoreUtils.isFunction(contract)) ? (contract() & FieldType.Required) : (contract & FieldType.Required);\r\n            const isHidden = (CoreUtils.isFunction(contract)) ? (contract() & FieldType.Hidden) : (contract & FieldType.Hidden);\r\n            const isArray = contract & FieldType.Array;\r\n\r\n            const isPresent = source[field] !== undefined;\r\n            const isObject = CoreUtils.isObject(source[field]) && source[field] !== null;\r\n\r\n            if (isRequired && !isPresent && !isArray) {\r\n                this._logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.MissingRequiredFieldSpecification,\r\n                    \"Missing required field specification. The field is required but not present on source\",\r\n                    { field, name });\r\n\r\n                // If not in debug mode, continue and hope the error is permissible\r\n                continue;\r\n            }\r\n\r\n            if (isHidden) {\r\n                // Don't serialize hidden fields\r\n                continue;\r\n            }\r\n\r\n            let value;\r\n            if (isObject) {\r\n                if (isArray) {\r\n                    // special case; resurse on each object in the source array\r\n                    value = this._serializeArray(source[field], field);\r\n                } else {\r\n                    // recurse on the source object in this field\r\n                    value = this._serializeObject(source[field], field);\r\n                }\r\n            } else {\r\n                // assign the source field to the output even if undefined or required\r\n                value = source[field];\r\n            }\r\n\r\n            // only emit this field if the value is defined\r\n            if (value !== undefined) {\r\n                output[field] = value;\r\n            }\r\n        }\r\n\r\n        delete source[circularReferenceCheck];\r\n        return output;\r\n    }\r\n\r\n    private _serializeArray(sources: ISerializable[], name: string): any[] {\r\n        let output;\r\n\r\n        if (!!sources) {\r\n            if (!Util.isArray(sources)) {\r\n                this._logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.ItemNotInArray,\r\n                    \"This field was specified as an array in the contract but the item is not an array.\\r\\n\",\r\n                    { name }, true);\r\n            } else {\r\n                output = [];\r\n                for (let i = 0; i < sources.length; i++) {\r\n                    const source = sources[i];\r\n                    const item = this._serializeObject(source, name + \"[\" + i + \"]\");\r\n                    output.push(item);\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private _serializeStringMap(map: any, expectedType: string, name: string) {\r\n        let output;\r\n        if (map) {\r\n            output = {};\r\n            for (const field in map) {\r\n                const value = map[field];\r\n                if (expectedType === \"string\") {\r\n                    if (value === undefined) {\r\n                        output[field] = \"undefined\";\r\n                    } else if (value === null) {\r\n                        output[field] = \"null\";\r\n                    } else if (!value.toString) {\r\n                        output[field] = \"invalid field: toString() is not defined.\";\r\n                    }\r\n                    else {\r\n                        output[field] = value.toString();\r\n                    }\r\n                }\r\n                else if (expectedType === \"number\") {\r\n                    if (value === undefined) {\r\n                        output[field] = \"undefined\";\r\n                    } else if (value === null) {\r\n                        output[field] = \"null\";\r\n                    } else {\r\n                        const num = parseFloat(value);\r\n                        if (isNaN(num)) {\r\n                            output[field] = \"NaN\";\r\n                        }\r\n                        else {\r\n                            output[field] = num;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    output[field] = \"invalid field: \" + name + \" is of unknown type.\";\r\n                    this._logger.throwInternal(LoggingSeverity.CRITICAL, output[field], null, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n}"]}