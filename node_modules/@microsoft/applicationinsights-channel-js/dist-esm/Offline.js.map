{"version":3,"file":"Offline.js","sourceRoot":"","sources":["../src/Offline.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,wCAAwC,CAAC;AAEtH;;;;GAIG;AACH;IAKI;QAFQ,kBAAa,GAAY,IAAI,CAAC;QAGlC,IAAI,OAAO,GAAG,SAAS,EAAE,CAAC;QAC1B,IAAI,SAAS,GAAG,WAAW,EAAE,CAAC;QAC9B,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrE,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBACrE,WAAW,GAAG,IAAI,CAAC;gBACvB,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,+CAA+C;gBAC/C,IAAI,MAAM,GAAO,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC;gBAE7C,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC1C,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC9C,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;oBAC/C,WAAW,GAAG,IAAI,CAAC;gBACvB,CAAC;YACL,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAET,qCAAqC;YACrC,WAAW,GAAG,KAAK,CAAC;QACxB,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAEM,kCAAQ,GAAf;QACI,IAAI,UAAU,GAAG,YAAY,EAAE,CAAC;QAChC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAA;QAC7B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;QAC7B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,oDAAoD;YACpD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAEM,mCAAS,GAAhB;QACI,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAEO,oCAAU,GAAlB;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IACO,qCAAW,GAAnB;QACI,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC/B,CAAC;IA1Da,uBAAO,GAAG,IAAI,eAAe,CAAC;IA2DhD,sBAAC;CAAA,AA5DD,IA4DC;SA5DY,eAAe;AA8D5B,MAAM,CAAC,IAAM,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC","sourcesContent":["import { CoreUtils, EventHelper, getWindow, getDocument, getNavigator } from '@microsoft/applicationinsights-core-js';\r\n\r\n/**\r\n * @description Monitors browser for offline events\r\n * @export default - Offline: Static instance of OfflineListener\r\n * @class OfflineListener\r\n */\r\nexport class OfflineListener {\r\n    public static Offline = new OfflineListener;\r\n    public isListening: boolean;\r\n    private _onlineStatus: boolean = true;\r\n    \r\n    constructor() {\r\n        let _window = getWindow();\r\n        let _document = getDocument();\r\n        let isListening = false;\r\n        let _this = this;\r\n\r\n        try {\r\n            if (_window) {\r\n                if (EventHelper.Attach(_window, 'online', this._setOnline.bind(_this))) {\r\n                    EventHelper.Attach(_window, 'offline', this._setOffline.bind(_this));\r\n                    isListening = true;\r\n                }\r\n            }\r\n            \r\n            if (_document) {\r\n                // Also attach to the document.body or document\r\n                let target:any = _document.body || _document;\r\n\r\n                if (!CoreUtils.isUndefined(target.ononline)) {\r\n                    target.ononline = this._setOnline.bind(_this);\r\n                    target.onoffline = this._setOffline.bind(_this)\r\n                    isListening = true;\r\n                }\r\n            }\r\n        } catch (e) {\r\n\r\n            // this makes react-native less angry\r\n            isListening = false;\r\n        }\r\n\r\n        this.isListening = isListening;\r\n    }\r\n\r\n    public isOnline(): boolean {\r\n        var _navigator = getNavigator();\r\n        if (this.isListening) {\r\n            return this._onlineStatus\r\n        } else if (_navigator && !CoreUtils.isNullOrUndefined(_navigator.onLine)) { // navigator.onLine is undefined in react-native\r\n            return _navigator.onLine;\r\n        } else {\r\n            // Cannot determine online status - report as online\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public isOffline(): boolean {\r\n        return !this.isOnline();\r\n    }\r\n\r\n    private _setOnline() {\r\n        this._onlineStatus = true;\r\n    }\r\n    private _setOffline() {\r\n        this._onlineStatus = false;\r\n    }\r\n}\r\n\r\nexport const Offline = OfflineListener.Offline;\r\n"]}